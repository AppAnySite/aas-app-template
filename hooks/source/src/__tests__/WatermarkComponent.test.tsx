import React from 'react';
import { render, screen } from '@testing-library/react-native';
import { ThemeProvider } from '../theme/ThemeProvider';
import { WatermarkComponent } from '../components/Watermark/WatermarkComponent';
import { WatermarkConfig } from '../types';

// Mock dependencies
jest.mock('react-native-safe-area-context', () => ({
  useSafeAreaInsets: () => ({ top: 0, bottom: 0, left: 0, right: 0 }),
}));

// Test wrapper component
const TestWrapper: React.FC<{ children: React.ReactNode }> = ({ children }) => (
  <ThemeProvider>
    {children}
  </ThemeProvider>
);

describe('WatermarkComponent', () => {
  const defaultConfig: WatermarkConfig = {
    enabled: true,
    text: 'Generated by AppAnySite',
    subtext: 'Professional WebView App Builder',
    position: 'bottom-right',
    opacity: 0.3,
    color: '#007AFF',
    fontSize: 12,
    subtextFontSize: 10,
    padding: 16,
    cornerRadius: 8,
    backgroundColor: 'rgba(0, 0, 0, 0.05)',
    showInScreenshots: true,
    showInProduction: true,
    showInDevelopment: true,
  };

  beforeEach(() => {
    jest.clearAllMocks();
  });

  describe('Rendering', () => {
    it('should render watermark when enabled', () => {
      render(
        <TestWrapper>
          <WatermarkComponent config={defaultConfig} />
        </TestWrapper>
      );

      const watermark = screen.getByTestId('watermark-component');
      expect(watermark).toBeTruthy();
    });

    it('should not render when disabled', () => {
      const disabledConfig = { ...defaultConfig, enabled: false };
      
      render(
        <TestWrapper>
          <WatermarkComponent config={disabledConfig} />
        </TestWrapper>
      );

      const watermark = screen.queryByTestId('watermark-component');
      expect(watermark).toBeNull();
    });

    it('should display main text', () => {
      render(
        <TestWrapper>
          <WatermarkComponent config={defaultConfig} />
        </TestWrapper>
      );

      expect(screen.getByText('Generated by AppAnySite')).toBeTruthy();
    });

    it('should display subtext when provided', () => {
      render(
        <TestWrapper>
          <WatermarkComponent config={defaultConfig} />
        </TestWrapper>
      );

      expect(screen.getByText('Professional WebView App Builder')).toBeTruthy();
    });

    it('should not display subtext when empty', () => {
      const configWithoutSubtext = { ...defaultConfig, subtext: '' };
      
      render(
        <TestWrapper>
          <WatermarkComponent config={configWithoutSubtext} />
        </TestWrapper>
      );

      expect(screen.getByText('Generated by AppAnySite')).toBeTruthy();
      expect(screen.queryByText('Professional WebView App Builder')).toBeNull();
    });
  });

  describe('Positioning', () => {
    it('should apply bottom-right positioning by default', () => {
      render(
        <TestWrapper>
          <WatermarkComponent config={defaultConfig} />
        </TestWrapper>
      );

      const watermark = screen.getByTestId('watermark-component');
      expect(watermark).toBeTruthy();
    });

    it('should apply top-left positioning', () => {
      const topLeftConfig = { ...defaultConfig, position: 'top-left' as const };
      
      render(
        <TestWrapper>
          <WatermarkComponent config={topLeftConfig} />
        </TestWrapper>
      );

      const watermark = screen.getByTestId('watermark-component');
      expect(watermark).toBeTruthy();
    });

    it('should apply top-right positioning', () => {
      const topRightConfig = { ...defaultConfig, position: 'top-right' as const };
      
      render(
        <TestWrapper>
          <WatermarkComponent config={topRightConfig} />
        </TestWrapper>
      );

      const watermark = screen.getByTestId('watermark-component');
      expect(watermark).toBeTruthy();
    });

    it('should apply bottom-left positioning', () => {
      const bottomLeftConfig = { ...defaultConfig, position: 'bottom-left' as const };
      
      render(
        <TestWrapper>
          <WatermarkComponent config={bottomLeftConfig} />
        </TestWrapper>
      );

      const watermark = screen.getByTestId('watermark-component');
      expect(watermark).toBeTruthy();
    });

    it('should apply center positioning', () => {
      const centerConfig = { ...defaultConfig, position: 'center' as const };
      
      render(
        <TestWrapper>
          <WatermarkComponent config={centerConfig} />
        </TestWrapper>
      );

      const watermark = screen.getByTestId('watermark-component');
      expect(watermark).toBeTruthy();
    });
  });

  describe('Styling', () => {
    it('should apply custom colors', () => {
      const customColorConfig = { ...defaultConfig, color: '#FF0000' };
      
      render(
        <TestWrapper>
          <WatermarkComponent config={customColorConfig} />
        </TestWrapper>
      );

      const watermark = screen.getByTestId('watermark-component');
      expect(watermark).toBeTruthy();
    });

    it('should apply custom font sizes', () => {
      const customFontConfig = { 
        ...defaultConfig, 
        fontSize: 16, 
        subtextFontSize: 14 
      };
      
      render(
        <TestWrapper>
          <WatermarkComponent config={customFontConfig} />
        </TestWrapper>
      );

      const watermark = screen.getByTestId('watermark-component');
      expect(watermark).toBeTruthy();
    });

    it('should apply custom opacity', () => {
      const customOpacityConfig = { ...defaultConfig, opacity: 0.5 };
      
      render(
        <TestWrapper>
          <WatermarkComponent config={customOpacityConfig} />
        </TestWrapper>
      );

      const watermark = screen.getByTestId('watermark-component');
      expect(watermark).toBeTruthy();
    });

    it('should apply custom background color', () => {
      const customBgConfig = { 
        ...defaultConfig, 
        backgroundColor: 'rgba(255, 0, 0, 0.1)' 
      };
      
      render(
        <TestWrapper>
          <WatermarkComponent config={customBgConfig} />
        </TestWrapper>
      );

      const watermark = screen.getByTestId('watermark-component');
      expect(watermark).toBeTruthy();
    });

    it('should apply custom padding and corner radius', () => {
      const customPaddingConfig = { 
        ...defaultConfig, 
        padding: 20, 
        cornerRadius: 12 
      };
      
      render(
        <TestWrapper>
          <WatermarkComponent config={customPaddingConfig} />
        </TestWrapper>
      );

      const watermark = screen.getByTestId('watermark-component');
      expect(watermark).toBeTruthy();
    });
  });

  describe('Environment Visibility', () => {
    it('should show in development when showInDevelopment is true', () => {
      const devConfig = { ...defaultConfig, showInDevelopment: true };
      
      render(
        <TestWrapper>
          <WatermarkComponent config={devConfig} />
        </TestWrapper>
      );

      const watermark = screen.getByTestId('watermark-component');
      expect(watermark).toBeTruthy();
    });

    it('should not show in development when showInDevelopment is false', () => {
      const devConfig = { ...defaultConfig, showInDevelopment: false };
      
      render(
        <TestWrapper>
          <WatermarkComponent config={devConfig} />
        </TestWrapper>
      );

      const watermark = screen.queryByTestId('watermark-component');
      expect(watermark).toBeNull();
    });

    it('should show in production when showInProduction is true', () => {
      const prodConfig = { ...defaultConfig, showInProduction: true };
      
      render(
        <TestWrapper>
          <WatermarkComponent config={prodConfig} />
        </TestWrapper>
      );

      const watermark = screen.getByTestId('watermark-component');
      expect(watermark).toBeTruthy();
    });

    it('should not show in production when showInProduction is false', () => {
      const prodConfig = { ...defaultConfig, showInProduction: false };
      
      render(
        <TestWrapper>
          <WatermarkComponent config={prodConfig} />
        </TestWrapper>
      );

      const watermark = screen.queryByTestId('watermark-component');
      expect(watermark).toBeNull();
    });
  });

  describe('Accessibility', () => {
    it('should have proper accessibility labels', () => {
      render(
        <TestWrapper>
          <WatermarkComponent config={defaultConfig} />
        </TestWrapper>
      );

      const watermark = screen.getByTestId('watermark-component');
      expect(watermark).toBeTruthy();
    });

    it('should be non-interactive', () => {
      render(
        <TestWrapper>
          <WatermarkComponent config={defaultConfig} />
        </TestWrapper>
      );

      const watermark = screen.getByTestId('watermark-component');
      expect(watermark).toBeTruthy();
    });
  });

  describe('Custom TestID', () => {
    it('should use custom testID when provided', () => {
      render(
        <TestWrapper>
          <WatermarkComponent 
            config={defaultConfig} 
            testID="custom-watermark" 
          />
        </TestWrapper>
      );

      const watermark = screen.getByTestId('custom-watermark');
      expect(watermark).toBeTruthy();
    });
  });

  describe('Edge Cases', () => {
    it('should handle empty text gracefully', () => {
      const emptyTextConfig = { ...defaultConfig, text: '' };
      
      render(
        <TestWrapper>
          <WatermarkComponent config={emptyTextConfig} />
        </TestWrapper>
      );

      const watermark = screen.getByTestId('watermark-component');
      expect(watermark).toBeTruthy();
    });

    it('should handle very long text', () => {
      const longTextConfig = { 
        ...defaultConfig, 
        text: 'This is a very long watermark text that should be handled gracefully by the component',
        subtext: 'This is also a very long subtext that should be handled properly'
      };
      
      render(
        <TestWrapper>
          <WatermarkComponent config={longTextConfig} />
        </TestWrapper>
      );

      const watermark = screen.getByTestId('watermark-component');
      expect(watermark).toBeTruthy();
    });

    it('should handle extreme opacity values', () => {
      const extremeOpacityConfig = { ...defaultConfig, opacity: 0 };
      
      render(
        <TestWrapper>
          <WatermarkComponent config={extremeOpacityConfig} />
        </TestWrapper>
      );

      const watermark = screen.getByTestId('watermark-component');
      expect(watermark).toBeTruthy();
    });

    it('should handle extreme font sizes', () => {
      const extremeFontConfig = { 
        ...defaultConfig, 
        fontSize: 1, 
        subtextFontSize: 1 
      };
      
      render(
        <TestWrapper>
          <WatermarkComponent config={extremeFontConfig} />
        </TestWrapper>
      );

      const watermark = screen.getByTestId('watermark-component');
      expect(watermark).toBeTruthy();
    });
  });
});
